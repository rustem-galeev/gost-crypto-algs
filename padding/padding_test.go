package padding

import (
	"bytes"
	"testing"
)

func TestAddPadding_BlockSize(t *testing.T) {
	message := []byte{
		0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x00,
		0xff, 0xee, 0xdd, 0xcc, 0xbb, 0xaa, 0x99, 0x88,
	}
	expectedResult := []byte{
		0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x00,
		0xff, 0xee, 0xdd, 0xcc, 0xbb, 0xaa, 0x99, 0x88,
		0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	result := AddPadding(message, 16)
	if !bytes.Equal(result, expectedResult) {
		t.Errorf("Message with padding isn't equal to expected")
	}
}

func TestRemovePadding_BlockSize(t *testing.T) {
	message := []byte{
		0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x00,
		0xff, 0xee, 0xdd, 0xcc, 0xbb, 0xaa, 0x99, 0x88,
		0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}
	expectedResult := []byte{
		0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x00,
		0xff, 0xee, 0xdd, 0xcc, 0xbb, 0xaa, 0x99, 0x88,
	}

	result := RemovePadding(message)
	if !bytes.Equal(result, expectedResult) {
		t.Errorf("Message without padding isn't equal to expected")
	}
}

func TestAddPadding_GreaterBlockSize(t *testing.T) {
	message := []byte{
		0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x00,
		0xff, 0xee, 0xdd, 0xcc, 0xbb, 0xaa, 0x99, 0x88,
		0x22, 0x33,
	}
	expectedResult := []byte{
		0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x00,
		0xff, 0xee, 0xdd, 0xcc, 0xbb, 0xaa, 0x99, 0x88,
		0x22, 0x33, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	result := AddPadding(message, 16)
	if !bytes.Equal(result, expectedResult) {
		t.Errorf("Message with padding isn't equal to expected")
	}
}

func TestRemovePadding_GreaterBlockSize(t *testing.T) {
	message := []byte{
		0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x00,
		0xff, 0xee, 0xdd, 0xcc, 0xbb, 0xaa, 0x99, 0x88,
		0x22, 0x33, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}
	expectedResult := []byte{
		0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x00,
		0xff, 0xee, 0xdd, 0xcc, 0xbb, 0xaa, 0x99, 0x88,
		0x22, 0x33,
	}

	result := RemovePadding(message)
	if !bytes.Equal(result, expectedResult) {
		t.Errorf("Message without padding isn't equal to expected")
	}
}

func TestAddPadding_LessBlockMessage(t *testing.T) {
	message := []byte{
		0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x00,
		0xff, 0xee, 0xdd, 0xcc, 0xbb, 0xaa, 0x99,
	}
	expectedResult := []byte{
		0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x00,
		0xff, 0xee, 0xdd, 0xcc, 0xbb, 0xaa, 0x99, 0x80,
	}

	result := AddPadding(message, 16)
	if !bytes.Equal(result, expectedResult) {
		t.Errorf("Message with padding isn't equal to expected")
	}
}

func TestResultPadding_LessBlockMessage(t *testing.T) {
	message := []byte{
		0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x00,
		0xff, 0xee, 0xdd, 0xcc, 0xbb, 0xaa, 0x99, 0x80,
	}
	expectedResult := []byte{
		0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x00,
		0xff, 0xee, 0xdd, 0xcc, 0xbb, 0xaa, 0x99,
	}

	result := RemovePadding(message)
	if !bytes.Equal(result, expectedResult) {
		t.Errorf("Message without padding isn't equal to expected")
	}
}
