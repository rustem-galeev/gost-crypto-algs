package encrypt64

import (
	"bytes"
	"fmt"
	"testing"
)

func TestEncrypt_ok(t *testing.T) {
	key := []byte{
		0xff, 0xee, 0xdd, 0xcc, 0xbb, 0xaa, 0x99, 0x88,
		0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0x00,
		0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7,
		0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff,
	}
	plainText := []byte{
		0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10,
	}
	expectedResult := []byte{
		0x4e, 0xe9, 0x01, 0xe5, 0xc2, 0xd8, 0xca, 0x3d,
	}

	cipherText := make([]byte, 8)
	cipher, _ := New(key)
	cipher.Encrypt(cipherText, plainText)

	if !bytes.Equal(cipherText, expectedResult) {
		t.Errorf("Cipher text isn't equal to expected" +
			fmt.Sprintf(".\nActual: %v", cipherText) +
			fmt.Sprintf(".\nExpected: %v", expectedResult))
	}
}

func TestDecrypt_ok(t *testing.T) {
	key := []byte{
		0xff, 0xee, 0xdd, 0xcc, 0xbb, 0xaa, 0x99, 0x88,
		0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0x00,
		0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7,
		0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff,
	}
	cipherText := []byte{
		0x4e, 0xe9, 0x01, 0xe5, 0xc2, 0xd8, 0xca, 0x3d,
	}
	expectedResult := []byte{
		0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10,
	}

	plainText := make([]byte, 8)
	cipher, _ := New(key)
	cipher.Decrypt(plainText, cipherText)

	if !bytes.Equal(plainText, expectedResult) {
		t.Errorf("Plain text isn't equal to expected" +
			fmt.Sprintf(".\nActual: %v", plainText) +
			fmt.Sprintf(".\nExpected: %v", expectedResult))
	}
}
