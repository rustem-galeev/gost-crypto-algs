package encrypt128

import (
	"bytes"
	"fmt"
	"testing"
)

func TestEncrypt(t *testing.T) {
	key := []byte{
		0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff,
		0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
		0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10,
		0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef,
	}
	plainText := []byte{
		0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x00,
		0xff, 0xee, 0xdd, 0xcc, 0xbb, 0xaa, 0x99, 0x88,
	}
	expectedResult := []byte{
		0x7f, 0x67, 0x9d, 0x90, 0xbe, 0xbc, 0x24, 0x30,
		0x5a, 0x46, 0x8d, 0x42, 0xb9, 0xd4, 0xed, 0xcd,
	}

	cipherText := make([]byte, 16)
	cipher, _ := New(key)
	cipher.Encrypt(cipherText, plainText)

	if !bytes.Equal(cipherText, expectedResult) {
		t.Errorf("Cipher text isn't equal to expected" +
			fmt.Sprintf(".\nActual: %v", cipherText) +
			fmt.Sprintf(".\nExpected: %v", expectedResult))
	}
}

func TestDecrypt(t *testing.T) {
	key := []byte{
		0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff,
		0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
		0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10,
		0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef,
	}
	cipherText := []byte{
		0x7f, 0x67, 0x9d, 0x90, 0xbe, 0xbc, 0x24, 0x30,
		0x5a, 0x46, 0x8d, 0x42, 0xb9, 0xd4, 0xed, 0xcd,
	}
	expectedResult := []byte{
		0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x00,
		0xff, 0xee, 0xdd, 0xcc, 0xbb, 0xaa, 0x99, 0x88,
	}

	plainText := make([]byte, 16)
	cipher, _ := New(key)
	cipher.Decrypt(plainText, cipherText)

	if !bytes.Equal(plainText, expectedResult) {
		t.Errorf("Plain text isn't equal to expected" +
			fmt.Sprintf(".\nActual: %v", plainText) +
			fmt.Sprintf(".\nExpected: %v", expectedResult))
	}
}
